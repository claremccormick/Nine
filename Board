public class Board {
	
	private static final int[] RESET = {0,0,0,0,0,0,5,0,3,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,2,0};
	private static final int BAR  = 25;   // index of the BAR
	private static final int OFF  = 0;    // index of the BEAR OFF
	public  static final int X_PLAYER_ID = 0;
	public  static final int O_PLAYER_ID = 1;
	
	private int[][] checkers = new int[2][26];
			// 2D array of checkers
	        // 1st index: 0 = X_PLAYER_ID's checkers, 1 = O's checkers 
			// 2nd index: number of checkers on each pip, 0 to 25
			// pip 0 is bear off, pip 25 is the bar, pips 1-24 are on the baord

	
	Board () {
		for (int p=0; p<2; p++)  {
			for (int i=0; i<26; i++)   {
				checkers[p][i] = RESET[i];
			}
		}
		return;
	}
	
	
	public void doPlay (int playerId, Play play) {
		// move checkers 
		int startPip, endPip;
		int oppPlayerId, oppPip;
		Move move;
		
		if (playerId == X_PLAYER_ID)  {
			oppPlayerId = O_PLAYER_ID;
		}
		else  {
			oppPlayerId = X_PLAYER_ID;
		}
	
	    for (int i=0; i<play.length(); i++) {
	    	move = play.getMove(i);
	    	startPip = move.getFromPip();
	    	checkers[playerId][startPip] -= 1;
    		endPip   = startPip - move.getByPips();
     		if (endPip < OFF)	{							// check for long bear offs
	    		endPip = OFF;   
     		}
	    	checkers[playerId][endPip] += 1;
	    	oppPip = BAR-endPip;
	    	if ((checkers[oppPlayerId][oppPip]==1) && (endPip!=BAR) && (endPip!=OFF))	{	// check for HIT
	    		checkers[oppPlayerId][oppPip] -= 1;
	    		checkers[oppPlayerId][BAR] += 1;
	    	}
	    }	
	    return;
	}

	
	public static void displayChecker (int playerId) {
		if (playerId == X_PLAYER_ID) {
			System.out.print("X");
		}
		else {
			System.out.print("O");
		}
		return;
	}

	
	private void displayPip (int pip) {
		// display the number of checkers on a pip
		int oppPip = BAR-pip;  
		
		if  (checkers[X_PLAYER_ID][pip] > 0) {
			displayChecker(X_PLAYER_ID);
			System.out.print(checkers[X_PLAYER_ID][pip] + "  ");
		}
		else
			if (checkers[O_PLAYER_ID][oppPip] > 0) {
				displayChecker(O_PLAYER_ID);
				System.out.print(checkers[O_PLAYER_ID][oppPip] + "  ");
			}
			else {
				System.out.print("|   ");		
			}
		return;
	}	
	
	
	private  void displayOffBoard (int playerId, int pip) {
		// display the number of checkers on the bar or on the bear off
		if  (checkers[playerId][pip] > 0) {
			displayChecker(playerId);
			System.out.print(checkers[playerId][pip] + "  "); 
		}
		else
			System.out.print("    ");			
		return;
	}
	
	
	public void displayBoard () {
		// display the whole board
		// board is facing player 0
		// player 0 is X_PLAYER_ID anti-clockwise, player 1 is O clockwise
		
		// far boards
		System.out.println("13--+---+---+---+---18 BAR  19--+---+---+---+---24  OFF");
		for (int i=13; i<=18; i++) {
			displayPip(i);                // player 1 outer board
		}
		displayOffBoard(X_PLAYER_ID,BAR);       // player 0 bar
		for (int i=19; i<=24; i++) {
			displayPip(i);                // player 1 inner board
		}
		displayOffBoard(O_PLAYER_ID,OFF);         // player 1 bear off
		System.out.println("");

		// separator
		System.out.println("");

		// near boards
		for (int i=12; i>=7; i--) {
			displayPip(i);                 // player 0 outer board
		}
		displayOffBoard(O_PLAYER_ID,BAR);          // player 1 bar
		for (int i=6; i>=1; i--) {
			displayPip(i);                 // player 0 inner board
		}
		displayOffBoard(X_PLAYER_ID,OFF);        // player 0 bear off
		System.out.println("");

		System.out.println("12--+---+---+---+---07 BAR  06--+---+---+---+---01  OFF");
		System.out.println("");
		
		return;
	}
	
}
